./tests/fixtures/input/creole/9:You can use [[internal links]] or [[http://www.wikicreole.org|external links]],
./tests/fixtures/input/creole/9:[[http://www.c2.com/doc/wikisym/WikiSym2006.pdf|Presentation at the Wikisym 06]].
./tests/fixtures/input/creole/9:Here's a external link without a description: [[http://www.wikicreole.org]]
./tests/fixtures/input/creole/9:Free links without braces should be rendered as well, like http://www.wikicreole.org/ and http://www.wikicreole.org/users/~example. 
./tests/fixtures/input/creole/9:Normal Link: http://wikicreole.org/ - now same link, but escaped: ~http://wikicreole.org/ 
./tests/fixtures/input/creole/9:This should be a flower with the ALT text "this is a flower" if your wiki supports ALT text on images:
./tests/fixtures/input/creole/9:If interwiki links are setup in your wiki, this links to the WikiCreole page about Creole 1.0 test cases: [[WikiCreole:Creole1.0TestCases]].
./tests/fixtures/output/nwiki/2:<p>That's an <a href="attachment.png" class="wiki-attachment">attachment</a>.</p>
./tests/fixtures/output/nwiki/2:<p>And that's an <div class="wiki_image_left"><p></p><img src="image.png" alt="image" /></div>.</p>
./tests/fixtures/output/creole/9:<p>You can use <a href="http://internal+links">internal links</a> or <a href="http://www.wikicreole.org">external links</a>,
./tests/fixtures/output/creole/9:<a href="http://www.c2.com/doc/wikisym/WikiSym2006.pdf">Presentation at the Wikisym 06</a>.</p>
./tests/fixtures/output/creole/9:<p>Here's a external link without a description: <a href="http://www.wikicreole.org">http://www.wikicreole.org</a></p>
./tests/fixtures/output/creole/9:<p>Free links without braces should be rendered as well, like <a href="http://www.wikicreole.org/">http://www.wikicreole.org/</a> and <a href="http://www.wikicreole.org/users/~example">http://www.wikicreole.org/users/~example</a>. </p>
./tests/fixtures/output/creole/9:<p>Normal Link: <a href="http://wikicreole.org/">http://wikicreole.org/</a> - now same link, but escaped: http://wikicreole.org/ </p>
./tests/fixtures/output/creole/9:<p>This should be a flower with the ALT text &quot;this is a flower&quot; if your wiki supports ALT text on images:</p>
./tests/fixtures/output/creole/9:<p><div class="wiki_image_left"><p></p><img src="Red-Flower.jpg" alt="here is a red flower" /></div></p>
./tests/fixtures/output/creole/9:<p>If interwiki links are setup in your wiki, this links to the WikiCreole page about Creole 1.0 test cases: <a href="http://WikiCreole%3ACreole1.0TestCases">WikiCreole:Creole1.0TestCases</a>.</p>
./tests/behat/collaborative_individual.feature:Feature: A teacher can set a wiki to be collaborative or individual
./tests/behat/collaborative_individual.feature:  In order to allow both collaborative wikis and individual journals with history register
./tests/behat/collaborative_individual.feature:  I need to select whether the wiki is collaborative or individual
./tests/behat/collaborative_individual.feature:  Scenario: Collaborative and individual wikis
./tests/behat/collaborative_individual.feature:      | Wiki name | Collaborative wiki name |
./tests/behat/collaborative_individual.feature:      | Description | Collaborative wiki description |
./tests/behat/collaborative_individual.feature:      | Wiki mode | Collaborative wiki |
./tests/behat/collaborative_individual.feature:    And I follow "Collaborative wiki name"
./tests/behat/collaborative_individual.feature:      | Wiki name | Individual wiki name |
./tests/behat/collaborative_individual.feature:      | Description | Individual wiki description |
./tests/behat/collaborative_individual.feature:      | Wiki mode | Individual wiki |
./tests/behat/collaborative_individual.feature:    And I follow "Individual wiki name"
./tests/behat/collaborative_individual.feature:    When I follow "Collaborative wiki name"
./tests/behat/collaborative_individual.feature:    And I follow "Individual wiki name"
./tests/behat/collaborative_individual.feature:    And I follow "Individual wiki name"
./tests/behat/collaborative_individual.feature:    And I follow "Collaborative wiki name"
./tests/behat/collaborative_individual.feature:    And I follow "Individual wiki name"
./tests/behat/preview_page.feature:Feature: Edited wiki pages may be previewed before saving
./tests/behat/preview_page.feature:      | Wiki name | Test wiki name |
./tests/behat/preview_page.feature:      | Description | Test wiki description |
./tests/behat/preview_page.feature:      | Wiki mode | Collaborative wiki |
./tests/behat/preview_page.feature:    And I follow "Test wiki name"
./tests/behat/page_history.feature:Feature: A history of each wiki page is available
./tests/behat/page_history.feature:  In order to know how a wiki page evolved over the time and how changed what
./tests/behat/page_history.feature:  I need to check the history of a wiki page
./tests/behat/page_history.feature:      | Wiki name | Test wiki name |
./tests/behat/page_history.feature:      | Description | Test wiki description |
./tests/behat/page_history.feature:      | Wiki mode | Collaborative wiki |
./tests/behat/page_history.feature:    And I follow "Test wiki name"
./tests/behat/page_history.feature:    And I follow "Test wiki name"
./tests/behat/page_history.feature:    And I follow "Test wiki name"
./tests/behat/wiki_formats.feature:Feature: There is a choice of formats for editing a wiki page
./tests/behat/wiki_formats.feature:  In order to allow users to use their favorite wiki format
./tests/behat/wiki_formats.feature:  I need to choose which wiki format do I want to use
./tests/behat/wiki_formats.feature:      | Wiki name | Test wiki name |
./tests/behat/wiki_formats.feature:      | Description | Test wiki description |
./tests/behat/wiki_formats.feature:    And I follow "Test wiki name"
./tests/behat/wiki_formats.feature:    Then "div.wikieditor-toolbar" "css_element" should exists
./tests/behat/wiki_formats.feature:    And I click on "//div[@class='wikieditor-toolbar']/descendant::a[1]" "xpath_element"
./tests/behat/wiki_formats.feature:    And I click on "//div[@class='wikieditor-toolbar']/descendant::a[2]" "xpath_element"
./tests/behat/wiki_formats.feature:    And I click on "//div[@class='wikieditor-toolbar']/descendant::a[4]" "xpath_element"
./tests/behat/wiki_formats.feature:    And I click on "//div[@class='wikieditor-toolbar']/descendant::a[8]" "xpath_element"
./tests/behat/wiki_formats.feature:    And I click on "Level 1 Header" "link" in the ".wiki-toc" "css_element"
./tests/behat/wiki_formats.feature:    Then "div.wikieditor-toolbar" "css_element" should exists
./tests/behat/wiki_formats.feature:    And I click on "//div[@class='wikieditor-toolbar']/descendant::a[2]" "xpath_element"
./tests/behat/wiki_formats.feature:    And I click on "//div[@class='wikieditor-toolbar']/descendant::a[4]" "xpath_element"
./tests/behat/wiki_formats.feature:    And I click on "//div[@class='wikieditor-toolbar']/descendant::a[8]" "xpath_element"
./tests/behat/wiki_formats.feature:    And I click on "Level 1 Header" "link" in the ".wiki-toc" "css_element"
./tests/wikiparser_test.php: * Unit tests for the wiki parser
./tests/wikiparser_test.php:    function testNwikiMarkup() {
./tests/wikiparser_test.php:        $this->assertTestFiles('nwiki');
./editors/wikifiletable.php: * This file contains all necessary code to define a wiki file table form element
./editors/wikifiletable.php: * @package mod-wiki-2.0
./editors/wikifiletable.php:                    $action_icons .= "<a href=\"javascript:void(0)\" class=\"socialwiki-attachment-attach\" ".$this->printInsertTags($tags['attach'], $file->get_filename())." title=\"".get_string('attachmentattach', 'wiki')."\">".$OUTPUT->pix_icon($icon, "Attach")."</a>"; //TODO: localize
./editors/wikifiletable.php:                $action_icons .= "&nbsp;&nbsp;<a href=\"javascript:void(0)\" class=\"socialwiki-attachment-link\" ".$this->printInsertTags($tags['link'], $file_url)." title=\"".get_string('attachmentlink', 'wiki')."\">".$OUTPUT->pix_icon($icon, "Link")."</a>";
./editors/wikifiletable.php:                    $action_icons .= "&nbsp;&nbsp;<a href=\"javascript:void(0)\" class=\"socialwiki-attachment-image\" ".$this->printInsertTags($tags['image'], $file->get_filename())." title=\"".get_string('attachmentimage', 'wiki')."\">".$OUTPUT->pix_icon($icon, "Image")."</a>"; //TODO: localize
./editors/wikifiletable.php://register wikieditor
./editors/wikifiletable.php:MoodleQuickForm::registerElementType('socialwikifiletable', $CFG->dirroot."/mod/socialwiki/editors/wikifiletable.php", 'MoodleQuickForm_socialwikifiletable');
./editors/wikieditor.php: * This file contains all necessary code to define a wiki editor
./editors/wikieditor.php: * @package mod-wiki-2.0
./editors/wikieditor.php:    function nwikiEditor($textarea) {
./editors/wikieditor.php:        $wiki_editor['bold'] = array('ed_bold.gif', get_string('wikiboldtext', 'socialwiki'), $tag[0], $tag[1], get_string('wikiboldtext', 'socialwiki'));
./editors/wikieditor.php:        $wiki_editor['italic'] = array('ed_italic.gif', get_string('wikiitalictext', 'socialwiki'), $tag[0], $tag[1], get_string('wikiitalictext', 'socialwiki'));
./editors/wikieditor.php:        $wiki_editor['image'] = array('ed_img.gif', get_string('wikiimage', 'socialwiki'), $imagetag[0], $imagetag[1], get_string('wikiimage', 'socialwiki'));
./editors/wikieditor.php:        $wiki_editor['internal'] = array('ed_internal.gif', get_string('wikiinternalurl', 'socialwiki'), $tag[0], $tag[1], get_string('wikiinternalurl', 'socialwiki'));
./editors/wikieditor.php:        $wiki_editor['external'] = array('ed_external.gif', get_string('wikiexternalurl', 'socialwiki'), $tag, "", get_string('wikiexternalurl', 'socialwiki'));
./editors/wikieditor.php:        $wiki_editor['u_list'] = array('ed_ul.gif', get_string('wikiunorderedlist', 'socialwiki'), '\\n'.$tag[0], '', '');
./editors/wikieditor.php:        $wiki_editor['o_list'] = array('ed_ol.gif', get_string('wikiorderedlist', 'socialwiki'), '\\n'.$tag[1], '', '');
./editors/wikieditor.php:        $wiki_editor['h1'] = array('ed_h1.gif', get_string('wikiheader', 'socialwiki', 1), '\\n'.$tag.' ', ' '.$tag.'\\n', get_string('wikiheader', 'socialwiki', 1));
./editors/wikieditor.php:        $wiki_editor['h2'] = array('ed_h2.gif', get_string('wikiheader', 'socialwiki', 2), '\\n'.$tag.$tag.' ', ' '.$tag.$tag.'\\n', get_string('wikiheader', 'socialwiki', 2));
./editors/wikieditor.php:        $wiki_editor['h3'] = array('ed_h3.gif', get_string('wikiheader', 'socialwiki', 3), '\\n'.$tag.$tag.$tag.' ', ' '.$tag.$tag.$tag.'\\n', get_string('wikiheader', 'socialwiki', 3));
./editors/wikieditor.php:        $wiki_editor['hr'] = array('ed_hr.gif', get_string('wikihr', 'socialwiki'), '\\n'.$tag.'\\n', '', '');
./editors/wikieditor.php:        $wiki_editor['nowiki'] = array('ed_nowiki.gif', get_string('wikinowikitext', 'socialwiki'), $tag[0], $tag[1], get_string('wikinowikitext', 'socialwiki'));
./editors/wikieditor.php:        $PAGE->requires->js('/mod/socialwiki/editors/wiki/buttons.js');
./editors/wikieditor.php:            $html .= html_writer::empty_tag('img', array('alt' => $button[1], 'src' => $CFG->wwwroot . '/mod/socialwiki/editors/wiki/images/' . $button[0]));
./editors/wikieditor.php:        $html .= "<option value='" . s(get_string('wikiimage', 'socialwiki')) . "'>" . get_string('insertimage', 'socialwiki') . '</option>';
./editors/wikieditor.php://register wikieditor
./editors/wikieditor.php:MoodleQuickForm::registerElementType('socialwikieditor', $CFG->dirroot."/mod/socialwiki/editors/wikieditor.php", 'MoodleQuickForm_socialwikieditor');
./editors/html.php: * @package wiki
./editors/html.php:    $OUTPUT->heading(strtoupper(get_string('formathtml', 'wiki')));
./editors/wikieditor.php~: * This file contains all necessary code to define a wiki editor
./editors/wikieditor.php~: * @package mod-wiki-2.0
./editors/wikieditor.php~:    function nwikiEditor($textarea) {
./editors/wikieditor.php~:        $wiki_editor['bold'] = array('ed_bold.gif', get_string('wikiboldtext', 'socialwiki'), $tag[0], $tag[1], get_string('wikiboldtext', 'socialwiki'));
./editors/wikieditor.php~:        $wiki_editor['italic'] = array('ed_italic.gif', get_string('wikiitalictext', 'socialwiki'), $tag[0], $tag[1], get_string('wikiitalictext', 'socialwiki'));
./editors/wikieditor.php~:        $wiki_editor['image'] = array('ed_img.gif', get_string('wikiimage', 'socialwiki'), $imagetag[0], $imagetag[1], get_string('wikiimage', 'socialwiki'));
./editors/wikieditor.php~:        $wiki_editor['internal'] = array('ed_internal.gif', get_string('wikiinternalurl', 'socialwiki'), $tag[0], $tag[1], get_string('wikiinternalurl', 'socialwiki'));
./editors/wikieditor.php~:        $wiki_editor['external'] = array('ed_external.gif', get_string('wikiexternalurl', 'socialwiki'), $tag, "", get_string('wikiexternalurl', 'socialwiki'));
./editors/wikieditor.php~:        $wiki_editor['u_list'] = array('ed_ul.gif', get_string('wikiunorderedlist', 'socialwiki'), '\\n'.$tag[0], '', '');
./editors/wikieditor.php~:        $wiki_editor['o_list'] = array('ed_ol.gif', get_string('wikiorderedlist', 'socialwiki'), '\\n'.$tag[1], '', '');
./editors/wikieditor.php~:        $wiki_editor['h1'] = array('ed_h1.gif', get_string('wikiheader', 'socialwiki', 1), '\\n'.$tag.' ', ' '.$tag.'\\n', get_string('wikiheader', 'socialwiki', 1));
./editors/wikieditor.php~:        $wiki_editor['h2'] = array('ed_h2.gif', get_string('wikiheader', 'socialwiki', 2), '\\n'.$tag.$tag.' ', ' '.$tag.$tag.'\\n', get_string('wikiheader', 'socialwiki', 2));
./editors/wikieditor.php~:        $wiki_editor['h3'] = array('ed_h3.gif', get_string('wikiheader', 'socialwiki', 3), '\\n'.$tag.$tag.$tag.' ', ' '.$tag.$tag.$tag.'\\n', get_string('wikiheader', 'socialwiki', 3));
./editors/wikieditor.php~:        $wiki_editor['hr'] = array('ed_hr.gif', get_string('wikihr', 'socialwiki'), '\\n'.$tag.'\\n', '', '');
./editors/wikieditor.php~:        $wiki_editor['nowiki'] = array('ed_nowiki.gif', get_string('wikinowikitext', 'socialwiki'), $tag[0], $tag[1], get_string('wikinowikitext', 'socialwiki'));
./editors/wikieditor.php~:        $PAGE->requires->js('/mod/socialwiki/editors/wiki/buttons.js');
./editors/wikieditor.php~:            $html .= html_writer::empty_tag('img', array('alt' => $button[1], 'src' => $CFG->wwwroot . '/mod/socialwiki/editors/wiki/images/' . $button[0]));
./editors/wikieditor.php~:        $html .= "<option value='" . s(get_string('wikiimage', 'socialwiki')) . "'>" . get_string('insertimage', 'socialwiki') . '</option>';
./editors/wikieditor.php~://register wikieditor
./editors/wikieditor.php~:MoodleQuickForm::registerElementType('socialwikieditor', $CFG->dirroot."/mod/socialwiki/editors/wikieditor.php", 'MoodleQuickForm_socialwikieditor');
./editors/socialwiki_editor.php: * @package wiki
./editors/socialwiki_editor.php: * Printing wiki editor.
./editors/socialwiki_editor.php:    $wiki_editor['bold'] = array('ed_bold.gif', get_string('wikiboldtext', 'socialwiki'), $tag[0], $tag[1], get_string('wikiboldtext', 'socialwiki'));
./editors/socialwiki_editor.php:    $wiki_editor['italic'] = array('ed_italic.gif', get_string('wikiitalictext', 'socialwiki'), $tag[0], $tag[1], get_string('wikiitalictext', 'socialwiki'));
./editors/socialwiki_editor.php:    $wiki_editor['internal'] = array('ed_internal.gif', get_string('wikiinternalurl', 'socialwiki'), $tag[0], $tag[1], get_string('wikiinternalurl', 'socialwiki'));
./editors/socialwiki_editor.php:    $wiki_editor['external'] = array('ed_external.gif', get_string('wikiexternalurl', 'socialwiki'), $tag[0], $tag[1], get_string('wikiexternalurl', 'socialwiki'));
./editors/socialwiki_editor.php:    $wiki_editor['u_list'] = array('ed_ul.gif', get_string('wikiunorderedlist', 'socialwiki'), '\\n' . $tag[0], '', '');
./editors/socialwiki_editor.php:    $wiki_editor['o_list'] = array('ed_ol.gif', get_string('wikiorderedlist', 'socialwiki'), '\\n' . $tag[1], '', '');
./editors/socialwiki_editor.php:    $wiki_editor['image'] = array('ed_img.gif', get_string('wikiimage', 'socialwiki'), $tag[0], $tag[1], get_string('wikiimage', 'socialwiki'));
./editors/socialwiki_editor.php:    $wiki_editor['h1'] = array('ed_h1.gif', get_string('wikiheader', 'socialwiki', 1), '\\n' . $tag . ' ', ' ' . $tag . '\\n', get_string('wikiheader', 'socialwiki', 1));
./editors/socialwiki_editor.php:    $wiki_editor['h2'] = array('ed_h2.gif', get_string('wikiheader', 'socialwiki', 2), '\\n' . $tag . $tag . ' ', ' ' . $tag . $tag . '\\n', get_string('wikiheader', 'socialwiki', 2));
./editors/socialwiki_editor.php:    $wiki_editor['h3'] = array('ed_h3.gif', get_string('wikiheader', 'socialwiki', 3), '\\n' . $tag . $tag . $tag . ' ', ' ' . $tag . $tag . $tag . '\\n', get_string('wikiheader', 'socialwiki', 3));
./editors/socialwiki_editor.php:    $wiki_editor['hr'] = array('ed_hr.gif', get_string('wikihr', 'socialwiki'), '\\n' . $tag . '\\n', '', '');
./editors/socialwiki_editor.php:    $wiki_editor['nowiki'] = array('ed_nowiki.gif', get_string('wikinowikitext', 'socialwiki'), $tag[0], $tag[1], get_string('wikinowikitext', 'socialwiki'));
./editors/socialwiki_editor.php:    $OUTPUT->heading(strtoupper(get_string('format' . $editor, 'wiki')));
./editors/socialwiki_editor.php:    $PAGE->requires->js('/mod/socialwiki/editors/wiki/buttons.js');
./editors/socialwiki_editor.php:        echo "<img width=\"23\" height=\"22\" src=\"$CFG->wwwroot/mod/socialwiki/editors/wiki/images/$button[0]\" alt=\"" . $button[1] . "\" title=\"" . $button[1] . "\" />";
./editors/socialwiki_editor.php: * Returns escaped token used by a wiki language to represent a given tag or "object" (bold -> **)
./editors/socialwiki_editor.php~: * @package wiki
./editors/socialwiki_editor.php~: * Printing wiki editor.
./editors/socialwiki_editor.php~:    $wiki_editor['bold'] = array('ed_bold.gif', get_string('wikiboldtext', 'socialwiki'), $tag[0], $tag[1], get_string('wikiboldtext', 'socialwiki'));
./editors/socialwiki_editor.php~:    $wiki_editor['italic'] = array('ed_italic.gif', get_string('wikiitalictext', 'socialwiki'), $tag[0], $tag[1], get_string('wikiitalictext', 'socialwiki'));
./editors/socialwiki_editor.php~:    $wiki_editor['internal'] = array('ed_internal.gif', get_string('wikiinternalurl', 'socialwiki'), $tag[0], $tag[1], get_string('wikiinternalurl', 'socialwiki'));
./editors/socialwiki_editor.php~:    $wiki_editor['external'] = array('ed_external.gif', get_string('wikiexternalurl', 'socialwiki'), $tag[0], $tag[1], get_string('wikiexternalurl', 'socialwiki'));
./editors/socialwiki_editor.php~:    $wiki_editor['u_list'] = array('ed_ul.gif', get_string('wikiunorderedlist', 'socialwiki'), '\\n' . $tag[0], '', '');
./editors/socialwiki_editor.php~:    $wiki_editor['o_list'] = array('ed_ol.gif', get_string('wikiorderedlist', 'socialwiki'), '\\n' . $tag[1], '', '');
./editors/socialwiki_editor.php~:    $wiki_editor['image'] = array('ed_img.gif', get_string('wikiimage', 'socialwiki'), $tag[0], $tag[1], get_string('wikiimage', 'socialwiki'));
./editors/socialwiki_editor.php~:    $wiki_editor['h1'] = array('ed_h1.gif', get_string('wikiheader', 'socialwiki', 1), '\\n' . $tag . ' ', ' ' . $tag . '\\n', get_string('wikiheader', 'socialwiki', 1));
./editors/socialwiki_editor.php~:    $wiki_editor['h2'] = array('ed_h2.gif', get_string('wikiheader', 'socialwiki', 2), '\\n' . $tag . $tag . ' ', ' ' . $tag . $tag . '\\n', get_string('wikiheader', 'socialwiki', 2));
./editors/socialwiki_editor.php~:    $wiki_editor['h3'] = array('ed_h3.gif', get_string('wikiheader', 'socialwiki', 3), '\\n' . $tag . $tag . $tag . ' ', ' ' . $tag . $tag . $tag . '\\n', get_string('wikiheader', 'socialwiki', 3));
./editors/socialwiki_editor.php~:    $wiki_editor['hr'] = array('ed_hr.gif', get_string('wikihr', 'socialwiki'), '\\n' . $tag . '\\n', '', '');
./editors/socialwiki_editor.php~:    $wiki_editor['nowiki'] = array('ed_nowiki.gif', get_string('wikinowikitext', 'socialwiki'), $tag[0], $tag[1], get_string('wikinowikitext', 'socialwiki'));
./editors/socialwiki_editor.php~:    $OUTPUT->heading(strtoupper(get_string('format' . $editor, 'wiki')));
./editors/socialwiki_editor.php~:    $PAGE->requires->js('/mod/socialwiki/editors/wiki/buttons.js');
./editors/socialwiki_editor.php~:        echo "<img width=\"23\" height=\"22\" src=\"$CFG->wwwroot/mod/socialwiki/editors/wiki/images/$button[0]\" alt=\"" . $button[1] . "\" title=\"" . $button[1] . "\" />";
./editors/socialwiki_editor.php~: * Returns escaped token used by a wiki language to represent a given tag or "object" (bold -> **)
./lang/en/wiki.php~: * @package wiki
./lang/en/wiki.php~:$string['cannotmanagefiles'] = 'You don\'t have permission to manage the wiki files.';
./lang/en/wiki.php~:$string['cannotviewfiles'] = 'You don\'t have permission to view the wiki files.';
./lang/en/wiki.php~:$string['creating'] = 'Creating a wiki page';
./lang/en/wiki.php~:$string['defaultformat_help'] = 'This setting determines the default format used when editing wiki pages.
./lang/en/wiki.php~:* Creole - A common wiki markup language for which a small edit toolbar is available
./lang/en/wiki.php~:* Nwiki - Mediawiki-like markup language used in the contributed Nwiki module';
./lang/en/wiki.php~:$string['editfiles'] = 'Edit wiki files';
./lang/en/wiki.php~:$string['editing'] = 'Editing wiki page';
./lang/en/wiki.php~:$string['firstpagetitle_help'] = 'Title of the first page of the wiki.';
./lang/en/wiki.php~:$string['forceformat_help'] = 'If the format is forced (checkbox ticked), there is no option to choose a format when editing a wiki page.';
./lang/en/wiki.php~:* Creole - A common wiki markup language for which a small edit toolbar is available
./lang/en/wiki.php~:* Nwiki - Mediawiki-like markup language used in the contributed Nwiki module';
./lang/en/wiki.php~:$string['formatcreole_help'] = 'Creole is a common wiki markup language with an edit toolbar for inserting appropriate markup.
./lang/en/wiki.php~:$string['formatcreole_link'] = 'mod/wiki/creole';
./lang/en/wiki.php~:$string['formatnwiki'] = 'NWiki format';
./lang/en/wiki.php~:$string['formatnwiki_help'] = 'Nwiki is the Mediawiki-like markup language used in the contributed Nwiki module.
./lang/en/wiki.php~:$string['formatnwiki_link'] = 'mod/wiki/nwiki';
./lang/en/wiki.php~:$string['insertimage_help'] = 'This drop-down list will insert an image to the wiki editor. If you need to add more images to the wiki, please use "Files" tab.';
./lang/en/wiki.php~:$string['individualpagedoesnotexist'] = 'Individual wiki page doesn\'t exist';
./lang/en/wiki.php~:$string['migrationfinishednowikis'] = 'Migration finished, no wikis were migrated';
./lang/en/wiki.php~:$string['modulename_help'] = 'The wiki activity module enables participants to add and edit a collection of web pages. A wiki can be collaborative, with everyone being able to edit it, or individual, where everyone has their own wiki which only they can edit.
./lang/en/wiki.php~:A history of previous versions of each page in the wiki is kept, listing the edits made by each participant.
./lang/en/wiki.php~:* As a personal journal for examination notes or revision (using an individual wiki)';
./lang/en/wiki.php~:$string['modulename_link'] = 'mod/wiki/view';
./lang/en/wiki.php~:$string['navigationfrom_help'] = 'The wiki pages linking to this page';
./lang/en/wiki.php~:$string['nocontribs'] = 'You have no contributions in this wiki';
./lang/en/wiki.php~:$string['nomanagewikipermission'] = 'Manage wiki permission needed';
./lang/en/wiki.php~:$string['notmigrated'] = 'This wiki has not been migrated yet. Please contact your administrator.';
./lang/en/wiki.php~:$string['nwiki'] = 'NWiki';
./lang/en/wiki.php~:$string['page-mod-wiki-x'] = 'Any wiki module page';
./lang/en/wiki.php~:$string['page-mod-wiki-view'] = 'Wiki module main page';
./lang/en/wiki.php~:$string['page-mod-wiki-comments'] = 'Wiki module comments page';
./lang/en/wiki.php~:$string['page-mod-wiki-history'] = 'Wiki history page';
./lang/en/wiki.php~:$string['page-mod-wiki-map'] = 'Wiki map page';
./lang/en/wiki.php~:$string['pageindex_help'] = 'This wiki\'s page tree';
./lang/en/wiki.php~:$string['removeallwikitags'] = 'Remove all wiki tags';
./lang/en/wiki.php~:$string['saving'] = 'Saving wiki page';
./lang/en/wiki.php~:$string['searchwikis'] = 'Search Wiki';
./lang/en/wiki.php~:$string['updatedpages_help'] = "Recently updated wiki pages";
./lang/en/wiki.php~:$string['updatedwikipages'] = "Updated wiki pages";
./lang/en/wiki.php~:$string['wiki'] = 'Wiki';
./lang/en/wiki.php~:$string['wikiattachments'] = 'Wiki attachments';
./lang/en/wiki.php~:$string['wikiboldtext'] = 'Bold text';
./lang/en/wiki.php~:$string['wikiexternalurl'] = 'External URL';
./lang/en/wiki.php~:$string['wikifiletable'] = 'Uploaded file list';
./lang/en/wiki.php~:$string['wikifiles'] = 'Wiki files';
./lang/en/wiki.php~:$string['wikiheader'] = 'Level {$a} Header';
./lang/en/wiki.php~:$string['wikihr'] = 'Horizontal rule';
./lang/en/wiki.php~:$string['wikiimage'] = 'Image';
./lang/en/wiki.php~:$string['wikiinternalurl'] = 'Internal link';
./lang/en/wiki.php~:$string['wikiintro'] = 'Description';
./lang/en/wiki.php~:$string['wikiitalictext'] = 'Italic text';
./lang/en/wiki.php~:$string['wikilockingsettings'] = 'Locking and reparsing timeouts';
./lang/en/wiki.php~:$string['wikimode'] = 'Wiki mode';
./lang/en/wiki.php~:$string['wikimode_help'] = 'The wiki mode determines whether everyone can edit the wiki - a collaborative wiki - or whether everyone has their own wiki which only they can edit - an individual wiki.';
./lang/en/wiki.php~:$string['wikimodecollaborative'] = 'Collaborative wiki';
./lang/en/wiki.php~:$string['wikimodeindividual'] = 'Individual wiki';
./lang/en/wiki.php~:$string['wikiname'] = 'Wiki name';
./lang/en/wiki.php~:$string['wikinowikitext'] = 'No wiki text';
./lang/en/wiki.php~:$string['wikiorderedlist'] = 'Ordered list';
./lang/en/wiki.php~:$string['wikisettings'] = 'Wiki settings';
./lang/en/wiki.php~:$string['wikiunorderedlist'] = 'Unordered list';
./lang/en/wiki.php~:$string['wiki:addinstance'] = 'Add a new wiki';
./lang/en/wiki.php~:$string['wiki:createpage'] = 'Create new wiki pages';
./lang/en/wiki.php~:$string['wiki:editcomment'] = 'Add comments to pages';
./lang/en/wiki.php~:$string['wiki:editpage'] = 'Save wiki pages';
./lang/en/wiki.php~:$string['wiki:managecomment'] = 'Manage wiki comments';
./lang/en/wiki.php~:$string['wiki:managewiki'] = 'Manage wiki settings';
./lang/en/wiki.php~:$string['wiki:managefiles'] = 'Manage wiki files';
./lang/en/wiki.php~:$string['wiki:overridelock'] = 'Override wiki locks';
./lang/en/wiki.php~:$string['wiki:viewcomment'] = 'View page comments';
./lang/en/wiki.php~:$string['wiki:viewpage'] = 'View wiki pages';
./lang/en/wiki.php~:$string['wikipages'] = 'Wiki pages';
./lang/en/socialwiki.php~: * @package wiki
./lang/en/socialwiki.php~:$string['cannotmanagefiles'] = 'You don\'t have permission to manage the wiki files.';
./lang/en/socialwiki.php~:$string['cannotviewfiles'] = 'You don\'t have permission to view the wiki files.';
./lang/en/socialwiki.php~:$string['creating'] = 'Creating a wiki page';
./lang/en/socialwiki.php~:$string['defaultformat_help'] = 'This setting determines the default format used when editing wiki pages.
./lang/en/socialwiki.php~:* Creole - A common wiki markup language for which a small edit toolbar is available
./lang/en/socialwiki.php~:* Nwiki - Mediawiki-like markup language used in the contributed Nwiki module';
./lang/en/socialwiki.php~:$string['editfiles'] = 'Edit wiki files';
./lang/en/socialwiki.php~:$string['editing'] = 'Editing wiki page';
./lang/en/socialwiki.php~:$string['firstpagetitle_help'] = 'Title of the first page of the wiki.';
./lang/en/socialwiki.php~:$string['forceformat_help'] = 'If the format is forced (checkbox ticked), there is no option to choose a format when editing a wiki page.';
./lang/en/socialwiki.php~:* Creole - A common wiki markup language for which a small edit toolbar is available
./lang/en/socialwiki.php~:* Nwiki - Mediawiki-like markup language used in the contributed Nwiki module';
./lang/en/socialwiki.php~:$string['formatcreole_help'] = 'Creole is a common wiki markup language with an edit toolbar for inserting appropriate markup.
./lang/en/socialwiki.php~:$string['formatnwiki'] = 'NWiki format';
./lang/en/socialwiki.php~:$string['formatnwiki_help'] = 'Nwiki is the Mediawiki-like markup language used in the contributed Nwiki module.
./lang/en/socialwiki.php~:$string['formatnwiki_link'] = 'mod/socialwiki/nwiki';
./lang/en/socialwiki.php~:$string['insertimage_help'] = 'This drop-down list will insert an image to the wiki editor. If you need to add more images to the wiki, please use "Files" tab.';
./lang/en/socialwiki.php~:$string['individualpagedoesnotexist'] = 'Individual wiki page doesn\'t exist';
./lang/en/socialwiki.php~:$string['migrationfinishednowikis'] = 'Migration finished, no wikis were migrated';
./lang/en/socialwiki.php~:$string['modulename_help'] = 'The wiki activity module enables participants to add and edit a collection of web pages. A wiki can be collaborative, with everyone being able to edit it, or individual, where everyone has their own wiki which only they can edit.
./lang/en/socialwiki.php~:A history of previous versions of each page in the wiki is kept, listing the edits made by each participant.
./lang/en/socialwiki.php~:* As a personal journal for examination notes or revision (using an individual wiki)';
./lang/en/socialwiki.php~:$string['navigationfrom_help'] = 'The wiki pages linking to this page';
./lang/en/socialwiki.php~:$string['nocontribs'] = 'You have no contributions in this wiki';
./lang/en/socialwiki.php~:$string['nomanagewikipermission'] = 'Manage wiki permission needed';
./lang/en/socialwiki.php~:$string['notmigrated'] = 'This wiki has not been migrated yet. Please contact your administrator.';
./lang/en/socialwiki.php~:$string['nwiki'] = 'NWiki';
./lang/en/socialwiki.php~:$string['page-mod-socialwiki-x'] = 'Any wiki module page';
./lang/en/socialwiki.php~:$string['pageindex_help'] = 'This wiki\'s page tree';
./lang/en/socialwiki.php~:$string['removeallwikitags'] = 'Remove all wiki tags';
./lang/en/socialwiki.php~:$string['saving'] = 'Saving wiki page';
./lang/en/socialwiki.php~:$string['search_socialwikis'] = 'Search Wiki';
./lang/en/socialwiki.php~:$string['updatedpages_help'] = "Recently updated wiki pages";
./lang/en/socialwiki.php~:$string['updatedwikipages'] = "Updated wiki pages";
./lang/en/socialwiki.php~:$string['wikiattachments'] = 'Wiki attachments';
./lang/en/socialwiki.php~:$string['wikiboldtext'] = 'Bold text';
./lang/en/socialwiki.php~:$string['wikiexternalurl'] = 'External URL';
./lang/en/socialwiki.php~:$string['wikifiletable'] = 'Uploaded file list';
./lang/en/socialwiki.php~:$string['wikifiles'] = 'Wiki files';
./lang/en/socialwiki.php~:$string['wikiheader'] = 'Level {$a} Header';
./lang/en/socialwiki.php~:$string['wikihr'] = 'Horizontal rule';
./lang/en/socialwiki.php~:$string['wikiimage'] = 'Image';
./lang/en/socialwiki.php~:$string['wikiinternalurl'] = 'Internal link';
./lang/en/socialwiki.php~:$string['wikiintro'] = 'Description';
./lang/en/socialwiki.php~:$string['wikiitalictext'] = 'Italic text';
./lang/en/socialwiki.php~:$string['wikilockingsettings'] = 'Locking and reparsing timeouts';
./lang/en/socialwiki.php~:$string['wikimode'] = 'Wiki mode';
./lang/en/socialwiki.php~:$string['wikimode_help'] = 'The wiki mode determines whether everyone can edit the wiki - a collaborative wiki - or whether everyone has their own wiki which only they can edit - an individual wiki.';
./lang/en/socialwiki.php~:$string['wikimodecollaborative'] = 'Collaborative wiki';
./lang/en/socialwiki.php~:$string['wikimodeindividual'] = 'Individual wiki';
./lang/en/socialwiki.php~:$string['wikiname'] = 'Wiki name';
./lang/en/socialwiki.php~:$string['wikinowikitext'] = 'No wiki text';
./lang/en/socialwiki.php~:$string['wikiorderedlist'] = 'Ordered list';
./lang/en/socialwiki.php~:$string['wikisettings'] = 'Wiki settings';
./lang/en/socialwiki.php~:$string['wikiunorderedlist'] = 'Unordered list';
./lang/en/socialwiki.php~:$string['socialwiki:addinstance'] = 'Add a new wiki';
./lang/en/socialwiki.php~:$string['socialwiki:createpage'] = 'Create new wiki pages';
./lang/en/socialwiki.php~:$string['socialwiki:editpage'] = 'Save wiki pages';
./lang/en/socialwiki.php~:$string['socialwiki:managecomment'] = 'Manage wiki comments';
./lang/en/socialwiki.php~:$string['socialwiki:manage_socialwiki'] = 'Manage wiki settings';
./lang/en/socialwiki.php~:$string['socialwiki:managefiles'] = 'Manage wiki files';
./lang/en/socialwiki.php~:$string['socialwiki:overridelock'] = 'Override wiki locks';
./lang/en/socialwiki.php~:$string['socialwiki:viewpage'] = 'View wiki pages';
./lang/en/socialwiki.php~:$string['socialwiki:managewiki'] = 'Manage Wiki';
./lang/en/socialwiki.php: * @package wiki
./lang/en/socialwiki.php:$string['cannotmanagefiles'] = 'You don\'t have permission to manage the wiki files.';
./lang/en/socialwiki.php:$string['cannotviewfiles'] = 'You don\'t have permission to view the wiki files.';
./lang/en/socialwiki.php:$string['creating'] = 'Creating a wiki page';
./lang/en/socialwiki.php:$string['defaultformat_help'] = 'This setting determines the default format used when editing wiki pages.
./lang/en/socialwiki.php:* Creole - A common wiki markup language for which a small edit toolbar is available
./lang/en/socialwiki.php:* Nwiki - Mediawiki-like markup language used in the contributed Nwiki module';
./lang/en/socialwiki.php:$string['editfiles'] = 'Edit wiki files';
./lang/en/socialwiki.php:$string['editing'] = 'Editing wiki page';
./lang/en/socialwiki.php:$string['firstpagetitle_help'] = 'Title of the first page of the wiki.';
./lang/en/socialwiki.php:$string['forceformat_help'] = 'If the format is forced (checkbox ticked), there is no option to choose a format when editing a wiki page.';
./lang/en/socialwiki.php:* Creole - A common wiki markup language for which a small edit toolbar is available
./lang/en/socialwiki.php:* Nwiki - Mediawiki-like markup language used in the contributed Nwiki module';
./lang/en/socialwiki.php:$string['formatcreole_help'] = 'Creole is a common wiki markup language with an edit toolbar for inserting appropriate markup.
./lang/en/socialwiki.php:$string['formatnwiki'] = 'NWiki format';
./lang/en/socialwiki.php:$string['formatnwiki_help'] = 'Nwiki is the Mediawiki-like markup language used in the contributed Nwiki module.
./lang/en/socialwiki.php:$string['formatnwiki_link'] = 'mod/socialwiki/nwiki';
./lang/en/socialwiki.php:$string['insertimage_help'] = 'This drop-down list will insert an image to the wiki editor. If you need to add more images to the wiki, please use "Files" tab.';
./lang/en/socialwiki.php:$string['individualpagedoesnotexist'] = 'Individual wiki page doesn\'t exist';
./lang/en/socialwiki.php:$string['migrationfinishednowikis'] = 'Migration finished, no wikis were migrated';
./lang/en/socialwiki.php:$string['modulename_help'] = 'The wiki activity module enables participants to add and edit a collection of web pages. A wiki can be collaborative, with everyone being able to edit it, or individual, where everyone has their own wiki which only they can edit.
./lang/en/socialwiki.php:A history of previous versions of each page in the wiki is kept, listing the edits made by each participant.
./lang/en/socialwiki.php:* As a personal journal for examination notes or revision (using an individual wiki)';
./lang/en/socialwiki.php:$string['navigationfrom_help'] = 'The wiki pages linking to this page';
./lang/en/socialwiki.php:$string['nocontribs'] = 'You have no contributions in this wiki';
./lang/en/socialwiki.php:$string['nomanagewikipermission'] = 'Manage wiki permission needed';
./lang/en/socialwiki.php:$string['notmigrated'] = 'This wiki has not been migrated yet. Please contact your administrator.';
./lang/en/socialwiki.php:$string['nwiki'] = 'NWiki';
./lang/en/socialwiki.php:$string['page-mod-socialwiki-x'] = 'Any wiki module page';
./lang/en/socialwiki.php:$string['pageindex_help'] = 'This wiki\'s page tree';
./lang/en/socialwiki.php:$string['removeallwikitags'] = 'Remove all wiki tags';
./lang/en/socialwiki.php:$string['saving'] = 'Saving wiki page';
./lang/en/socialwiki.php:$string['search_socialwikis'] = 'Search Wiki';
./lang/en/socialwiki.php:$string['updatedpages_help'] = "Recently updated wiki pages";
./lang/en/socialwiki.php:$string['updatedwikipages'] = "Updated wiki pages";
./lang/en/socialwiki.php:$string['wikiattachments'] = 'Wiki attachments';
./lang/en/socialwiki.php:$string['wikiboldtext'] = 'Bold text';
./lang/en/socialwiki.php:$string['wikiexternalurl'] = 'External URL';
./lang/en/socialwiki.php:$string['wikifiletable'] = 'Uploaded file list';
./lang/en/socialwiki.php:$string['wikifiles'] = 'Wiki files';
./lang/en/socialwiki.php:$string['wikiheader'] = 'Level {$a} Header';
./lang/en/socialwiki.php:$string['wikihr'] = 'Horizontal rule';
./lang/en/socialwiki.php:$string['wikiimage'] = 'Image';
./lang/en/socialwiki.php:$string['wikiinternalurl'] = 'Internal link';
./lang/en/socialwiki.php:$string['wikiintro'] = 'Description';
./lang/en/socialwiki.php:$string['wikiitalictext'] = 'Italic text';
./lang/en/socialwiki.php:$string['wikilockingsettings'] = 'Locking and reparsing timeouts';
./lang/en/socialwiki.php:$string['wikimode'] = 'Wiki mode';
./lang/en/socialwiki.php:$string['wikimode_help'] = 'The wiki mode determines whether everyone can edit the wiki - a collaborative wiki - or whether everyone has their own wiki which only they can edit - an individual wiki.';
./lang/en/socialwiki.php:$string['wikimodecollaborative'] = 'Collaborative wiki';
./lang/en/socialwiki.php:$string['wikimodeindividual'] = 'Individual wiki';
./lang/en/socialwiki.php:$string['wikiname'] = 'Wiki name';
./lang/en/socialwiki.php:$string['wikinowikitext'] = 'No wiki text';
./lang/en/socialwiki.php:$string['wikiorderedlist'] = 'Ordered list';
./lang/en/socialwiki.php:$string['wikisettings'] = 'Wiki settings';
./lang/en/socialwiki.php:$string['wikiunorderedlist'] = 'Unordered list';
./lang/en/socialwiki.php:$string['socialwiki:addinstance'] = 'Add a new wiki';
./lang/en/socialwiki.php:$string['socialwiki:createpage'] = 'Create new wiki pages';
./lang/en/socialwiki.php:$string['socialwiki:editpage'] = 'Save wiki pages';
./lang/en/socialwiki.php:$string['socialwiki:managecomment'] = 'Manage wiki comments';
./lang/en/socialwiki.php:$string['socialwiki:manage_socialwiki'] = 'Manage wiki settings';
./lang/en/socialwiki.php:$string['socialwiki:managefiles'] = 'Manage wiki files';
./lang/en/socialwiki.php:$string['socialwiki:overridelock'] = 'Override wiki locks';
./lang/en/socialwiki.php:$string['socialwiki:viewpage'] = 'View wiki pages';
./lang/en/socialwiki.php:$string['socialwiki:managewiki'] = 'Manage Wiki';
./lang/en/social_wiki.php~: * @package wiki
./lang/en/social_wiki.php~:$string['cannotmanagefiles'] = 'You don\'t have permission to manage the wiki files.';
./lang/en/social_wiki.php~:$string['cannotviewfiles'] = 'You don\'t have permission to view the wiki files.';
./lang/en/social_wiki.php~:$string['creating'] = 'Creating a wiki page';
./lang/en/social_wiki.php~:$string['defaultformat_help'] = 'This setting determines the default format used when editing wiki pages.
./lang/en/social_wiki.php~:* Creole - A common wiki markup language for which a small edit toolbar is available
./lang/en/social_wiki.php~:* Nwiki - Mediawiki-like markup language used in the contributed Nwiki module';
./lang/en/social_wiki.php~:$string['editfiles'] = 'Edit wiki files';
./lang/en/social_wiki.php~:$string['editing'] = 'Editing wiki page';
./lang/en/social_wiki.php~:$string['firstpagetitle_help'] = 'Title of the first page of the wiki.';
./lang/en/social_wiki.php~:$string['forceformat_help'] = 'If the format is forced (checkbox ticked), there is no option to choose a format when editing a wiki page.';
./lang/en/social_wiki.php~:* Creole - A common wiki markup language for which a small edit toolbar is available
./lang/en/social_wiki.php~:* Nwiki - Mediawiki-like markup language used in the contributed Nwiki module';
./lang/en/social_wiki.php~:$string['formatcreole_help'] = 'Creole is a common wiki markup language with an edit toolbar for inserting appropriate markup.
./lang/en/social_wiki.php~:$string['formatcreole_link'] = 'mod/wiki/creole';
./lang/en/social_wiki.php~:$string['formatnwiki'] = 'NWiki format';
./lang/en/social_wiki.php~:$string['formatnwiki_help'] = 'Nwiki is the Mediawiki-like markup language used in the contributed Nwiki module.
./lang/en/social_wiki.php~:$string['formatnwiki_link'] = 'mod/wiki/nwiki';
./lang/en/social_wiki.php~:$string['insertimage_help'] = 'This drop-down list will insert an image to the wiki editor. If you need to add more images to the wiki, please use "Files" tab.';
./lang/en/social_wiki.php~:$string['individualpagedoesnotexist'] = 'Individual wiki page doesn\'t exist';
./lang/en/social_wiki.php~:$string['migrationfinishednowikis'] = 'Migration finished, no wikis were migrated';
./lang/en/social_wiki.php~:$string['modulename_help'] = 'The wiki activity module enables participants to add and edit a collection of web pages. A wiki can be collaborative, with everyone being able to edit it, or individual, where everyone has their own wiki which only they can edit.
./lang/en/social_wiki.php~:A history of previous versions of each page in the wiki is kept, listing the edits made by each participant.
./lang/en/social_wiki.php~:* As a personal journal for examination notes or revision (using an individual wiki)';
./lang/en/social_wiki.php~:$string['modulename_link'] = 'mod/wiki/view';
./lang/en/social_wiki.php~:$string['navigationfrom_help'] = 'The wiki pages linking to this page';
./lang/en/social_wiki.php~:$string['nocontribs'] = 'You have no contributions in this wiki';
./lang/en/social_wiki.php~:$string['nomanagewikipermission'] = 'Manage wiki permission needed';
./lang/en/social_wiki.php~:$string['notmigrated'] = 'This wiki has not been migrated yet. Please contact your administrator.';
./lang/en/social_wiki.php~:$string['nwiki'] = 'NWiki';
./lang/en/social_wiki.php~:$string['page-mod-social_wiki-x'] = 'Any wiki module page';
./lang/en/social_wiki.php~:$string['pageindex_help'] = 'This wiki\'s page tree';
./lang/en/social_wiki.php~:$string['removeallwikitags'] = 'Remove all wiki tags';
./lang/en/social_wiki.php~:$string['saving'] = 'Saving wiki page';
./lang/en/social_wiki.php~:$string['search_social_wikis'] = 'Search Wiki';
./lang/en/social_wiki.php~:$string['updatedpages_help'] = "Recently updated wiki pages";
./lang/en/social_wiki.php~:$string['updatedwikipages'] = "Updated wiki pages";
./lang/en/social_wiki.php~:$string['social_wikimode_help'] = 'The wiki mode determines whether everyone can edit the wiki - a collaborative wiki - or whether everyone has their own wiki which only they can edit - an individual wiki.';
./lang/en/social_wiki.php~:$string['social_wikimodecollaborative'] = 'Collaborative wiki';
./lang/en/social_wiki.php~:$string['social_wikimodeindividual'] = 'Individual wiki';
./lang/en/social_wiki.php~:$string['social_wikinowikitext'] = 'No wiki text';
./lang/en/social_wiki.php~:$string['social_wiki:addinstance'] = 'Add a new wiki';
./lang/en/social_wiki.php~:$string['social_wiki:createpage'] = 'Create new wiki pages';
./lang/en/social_wiki.php~:$string['social_wiki:editpage'] = 'Save wiki pages';
./lang/en/social_wiki.php~:$string['social_wiki:managecomment'] = 'Manage wiki comments';
./lang/en/social_wiki.php~:$string['social_wiki:manage_social_wiki'] = 'Manage wiki settings';
./lang/en/social_wiki.php~:$string['social_wiki:managefiles'] = 'Manage wiki files';
./lang/en/social_wiki.php~:$string['social_wiki:overridelock'] = 'Override wiki locks';
./lang/en/social_wiki.php~:$string['social_wiki:viewpage'] = 'View wiki pages';
./backup/moodle2/restore_wiki_activity_task.class.php:require_once($CFG->dirroot . '/mod/wiki/backup/moodle2/restore_wiki_stepslib.php'); // Because it exists (must)
./backup/moodle2/restore_wiki_activity_task.class.php: * wiki restore task that provides all the settings and steps to perform one
./backup/moodle2/restore_wiki_activity_task.class.php:        // wiki only has one structure step
./backup/moodle2/restore_wiki_activity_task.class.php:     * wiki logs. It must return one array
./backup/moodle2/restore_wiki_activity_task.class.php:        /// TODO: Examine these 2 rules, because module is not "wiki", and it shouldn't happen
./backup/moodle2/restore_wiki_stepslib.php: * Structure step to restore one wiki activity
./backup/moodle2/restore_wiki_stepslib.php:        // insert the wiki record
./backup/moodle2/restore_wiki_stepslib.php:        $newitemid = $DB->insert_record(social_'wiki_versions', $data);
./backup/moodle2/restore_wiki_stepslib.php:        // Add wiki related files, no need to match by itemname (just internally handled context)
./backup/moodle2/backup_wiki_stepslib.php: * Define the complete wiki structure for backup, with file and id annotations
./backup/moodle2/backup_wiki_stepslib.php:        $wiki = new backup_nested_element('socialwiki', array('id'), array('name', 'intro', 'introformat', 'timecreated', 'timemodified', 'firstpagetitle', 'wikimode', 'defaultformat', 'forceformat', 'editbegin', 'editend'));
./backup/moodle2/backup_wiki_stepslib.php:                 WHERE wikiid = ?', array(backup::VAR_PARENTID));
./backup/moodle2/backup_wiki_stepslib.php:        // Return the root element (wiki), wrapped into standard activity structure
./backup/moodle2/backup_wiki_activity_task.class.php:require_once($CFG->dirroot . '/mod/wiki/backup/moodle2/backup_wiki_stepslib.php');
./backup/moodle2/backup_wiki_activity_task.class.php:require_once($CFG->dirroot . '/mod/wiki/backup/moodle2/backup_wiki_settingslib.php');
./backup/moodle2/backup_wiki_activity_task.class.php:     * Defines a backup step to store the instance data in the wiki.xml file
./backup/moodle2/backup_wiki_activity_task.class.php:        // Link to the list of wikis
./backup/moodle2/backup_wiki_activity_task.class.php:        // Link to wiki view by moduleid
./backup/moodle2/backup_wiki_activity_task.class.php:        // Link to wiki view by pageid
./backup/moodle1/lib.php: * @subpackage wiki
./backup/moodle1/lib.php:    /** @var string initial content for creating first page from the optional 1.9 wiki file */
./backup/moodle1/lib.php:                        'wtype' => 'wikimode'
./backup/moodle1/lib.php:                        'pagename', 'scaleid', 'ewikiprinttitle', 'htmlmode', 'ewikiacceptbinary', 'disablecamelcase',
./backup/moodle1/lib.php:                'wiki_entries', '/MOODLE_BACKUP/COURSE/MODULES/MOD/WIKI/ENTRIES',
./backup/moodle1/lib.php:                'wiki_entry', '/MOODLE_BACKUP/COURSE/MODULES/MOD/WIKI/ENTRIES/ENTRY'
./backup/moodle1/lib.php:                'wiki_pages', '/MOODLE_BACKUP/COURSE/MODULES/MOD/WIKI/ENTRIES/ENTRY/PAGES'
./backup/moodle1/lib.php:                'wiki_entry_page', '/MOODLE_BACKUP/COURSE/MODULES/MOD/WIKI/ENTRIES/ENTRY/PAGES/PAGE',
./backup/moodle1/lib.php:        if ($data['wikimode'] !== 'group') {
./backup/moodle1/lib.php:            $data['wikimode'] = 'individual';
./backup/moodle1/lib.php:            //@todo need to create extra subwikis due to individual wikimode?
./backup/moodle1/lib.php:            $data['wikimode'] = 'collaborative';
./backup/moodle1/lib.php:            'modulename' => 'wiki', 'contextid' => $contextid));
./backup/moodle1/lib.php:        $this->xmlwriter->begin_tag('wiki', array('id' => $instanceid));
./backup/moodle1/lib.php:     * This is executed when we reach the closing </MOD> tag of our 'wiki' path
./backup/moodle1/lib.php:                'id'            => $this->converter->get_nextid(), //just creating the first page in the wiki
./backup/moodle1/lib.php:        //close wiki.xml
./parser/markups/creole.php:include_once("wikimarkup.php");
./parser/markups/html.php: * @package wiki
./parser/markups/html.php:include_once("nwiki.php");
./parser/markups/html.php:class html_parser extends nwiki_parser {
./parser/markups/nwiki.php:include_once("wikimarkup.php");
./parser/markups/nwiki.php:class nwiki_parser extends socialwiki_markup_parser {
./parser/markups/wikimarkup.php:     * function wiki_parser_link_callback($link = "")
./parser/markups/wikimarkup.php:            $text .= socialparser_utils::h('a', '['.get_string('editsection', 'socialwiki').']', array('href' => "edit.php?pageid={$this->wiki_page_id}&section=" . urlencode($text), 'class' => 'wiki_edit_section'));
./parser/markups/wikimarkup.php~:     * function wiki_parser_link_callback($link = "")
./parser/markups/wikimarkup.php~:            $text .= socialparser_utils::h('a', '['.get_string('editsection', 'socialwiki').']', array('href' => "edit.php?pageid={$this->wiki_page_id}&section=" . urlencode($text), 'class' => 'wiki_edit_section'));
./diff/diff_nwiki.php:// A PHP diff engine for phpwiki. (Taken from phpwiki-1.3.3)
./diff/diff_nwiki.php: *	Additions by Axel Boldt follow, partly taken from diff.php, phpwiki-1.3.3
./diff/diff_nwiki.php:    		$htmltable[] = array('','+','<div class="wiki_diffadd">'.$line.'</div>');
./diff/diff_nwiki.php:    		$htmltable[] = array('<div class="wiki_diffdel">'.$line.'</div>','-','');
./diff/diff_nwiki.php:    		$htmltable[] = array('<div class="wiki_diffdel">'.$line.'</div>','-','<div class="wiki_diffadd">'.$aline.'</div>');
./db/access.php:    'mod/socialwiki:managewiki' => array(
./db/install.xml:        <FIELD NAME="course" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Course wiki activity belongs to"/>
./db/install.xml:        <FIELD NAME="intro" TYPE="text" NOTNULL="false" SEQUENCE="false" COMMENT="General introduction of the wiki activity"/>
./db/install.xml:        <FIELD NAME="wikimode" TYPE="char" LENGTH="20" NOTNULL="true" DEFAULT="collaborative" SEQUENCE="false" COMMENT="Wiki mode (individual, collaborative)"/>
./db/install.xml:        <FIELD NAME="wikiid" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Wiki activity"/>
./db/install.xml:        <FIELD NAME="groupid" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Group that owns this wiki"/>
./db/install.xml:        <KEY NAME="wikifk" TYPE="foreign" FIELDS="wikiid" REFTABLE="wiki" REFFIELDS="id" COMMENT="Foreign key to wiki table"/>
./db/install.xml:        <KEY NAME="wikiidgroupiduserid" TYPE="unique" FIELDS="wikiid, groupid, userid" COMMENT="Unique key"/>
./db/install.xml:    <TABLE NAME="socialwiki_pages" COMMENT="Stores wiki pages">
./db/install.xml:        <FIELD NAME="cachedcontent" TYPE="text" NOTNULL="true" SEQUENCE="false" COMMENT="Cache wiki content"/>
./db/install.xml:    <TABLE NAME="socialwiki_versions" COMMENT="Stores wiki page history">
./db/install.xml:        <FIELD NAME="content" TYPE="text" NOTNULL="true" SEQUENCE="false" COMMENT="Not parsed wiki content"/>
./db/install.xml:    <TABLE NAME="socialwiki_synonyms" COMMENT="Stores wiki pages synonyms">
./db/install.xml:    <TABLE NAME="socialwiki_links" COMMENT="Page wiki links">
./db/access.php~:    'mod/socialwiki:managewiki' => array(
./create.php:        print_error('invalidwikiid', 'socialwiki');
./create.php:        print_error('invalidwikiid', 'socialwiki');
./pagelib.php:     * @var array The tabs set used in wiki module
./pagelib.php:     * @var object wiki renderer
./pagelib.php:     * @param $wiki. Current wiki
./pagelib.php:        // initialise wiki renderer
./pagelib.php:            $manage = has_capability('mod/socialwiki:managewiki', $PAGE->cm->context);
./pagelib.php: * Class that models the behavior of wiki's view comments page
./pagelib.php:                } else if ($format == 'nwiki') {
./pagelib.php:                    $parsedcontent = socialwiki_parse_content('nwiki', $comment->content, $options);
./pagelib.php: * Class that models the behavior of wiki's edit comment
./pagelib.php: * Class that models the behavior of wiki's
./pagelib.php:                // wiki fromat
./pagelib.php: * Class that models the behavior of wiki's
./pagelib.php: * Class that models the behavior of wiki's history page
./pagelib.php:     * Prints the history for a given wiki page
./pagelib.php: * Class that models the behavior of wiki's map page
./pagelib.php:     * @var int wiki view option
./pagelib.php:            $fresh = wiki_refresh_cachedcontent($page);
./pagelib.php: * Class that models the behavior of wiki's restore version page
./pagelib.php:        require_capability('mod/socialwiki:managewiki', $this->modcontext, NULL, true, 'nomanagewikipermission', 'socialwiki');
./pagelib.php: * Class that models the behavior of wiki's delete comment confirmation page
./pagelib.php: * Class that models the behavior of wiki's view an old version of a page
./pagelib.php:        require_capability('mod/socialwiki:managewiki', $this->modcontext, NULL, true, 'nomanagewikipermission', 'socialwiki');
./pagelib.php: * This class will let user to delete wiki pages and page versions
./pagelib.php:     * @param mixed $wiki instance of wiki
./pagelib.php:     * Prints header for wiki page
./pagelib.php:     * This function will display administration view to users with managewiki capability
./pagelib.php:        //make sure anyone trying to access this page has managewiki capabilities
./pagelib.php:        require_capability('mod/socialwiki:managewiki', $this->modcontext, NULL, true, 'noviewpagepermission', 'socialwiki');
./pagelib.php:        //update wiki cache if timedout
./pagelib.php:     * Show wiki page delete options
./pagelib.php:     * @param array $pages objects of wiki pages in subwiki
./filesedit_form.php: * Edit wiki files form
./filesedit_form.php: * @package   mod-wiki-2.0
./edit.php: * This file contains all necessary code to edit a wiki page
./edit.php: * @package mod-wiki-2.0
./edit.php:    print_error('incorrectwikiid', 'socialwiki');
./editcomments.php: * @package mod-wiki-2.0
./editcomments.php:    print_error('incorrectwikiid', 'socialwiki');
./history.php: * @package mod-wiki-2.0
./history.php:    print_error('incorrectwikiid', 'socialwiki');
./map.php: * @package mod-wiki-2.0
./map.php:    print_error('incorrectwikiid', 'socialwiki');
./edit_form.php: * @package mod-wiki-2.0
./edit_form.php:require_once($CFG->dirroot . '/mod/socialwiki/editors/wikieditor.php');
./edit_form.php:            // This is being done ONLY to aid those who may have created there own wiki pages. It should be removed sometime
./edit_form.php:            // Use wiki editor
./lib.php: * Library of functions and constants for module wiki
./lib.php: * @package mod-wiki-2.0
./lib.php: * @return int The id of the newly inserted wiki record
./lib.php:    $subwikis = $DB->get_records('socialwiki_subwikis', array('wikiid' => $wiki->id));
./lib.php:    //get the wiki(s) in this course.
./lib.php:            $subwikis = $DB->get_records('socialwiki_subwikis', array('wikiid' => $wiki->id));
./lib.php:                            // Delete the related tag_instances related to the wiki page.
./lib.php: * Indicates API features that the wiki supports.
./lib.php: * that has occurred in wiki activities and print it out.
./lib.php:    $sql = "SELECT p.*, w.id as wikiid, sw.groupid
./lib.php:                JOIN {socialwiki} w ON w.id = sw.wikiid
./lib.php:            if ($groupmode == SEPARATEGROUPS and !has_capability('mod/socialwiki:managewiki', $context)) {
./lib.php:    echo $OUTPUT->heading(get_string("updatedwikipages", 'socialwiki') . ':', 3);
./lib.php: * This function returns if a scale is being used by one wiki
./lib.php:    //$rec = get_record("wiki","id","$wikiid","scale","-$scaleid");
./lib.php: * Checks if scale is being used by any instance of wiki.
./lib.php: * @return boolean True if the scale is used by any wiki
./lib.php:    //if ($scaleid and $DB->record_exists('wiki', array('grade' => -$scaleid))) {
./lib.php:        // wiki main page
./lib.php:        if (has_capability('mod/socialwiki:managewiki', $context)) {
./lib.php: * Returns all other caps used in wiki module
./locallib.php: * This contains functions and classes that will be used by scripts in wiki module
./locallib.php: * @package mod-wiki-2.0
./locallib.php: * Get a wiki instance
./locallib.php: * @param int $wikiid the instance id of wiki
./locallib.php: * Get sub wiki instances with same wiki id
./locallib.php:    return $DB->get_records('socialwiki_subwikis', array('wikiid' => $wikiid));
./locallib.php: * Get a sub wiki instance by wiki id and group id
./locallib.php:    return $DB->get_record('socialwiki_subwikis', array('wikiid' => $wikiid, 'groupid' => $groupid, 'userid' => $userid));
./locallib.php: * Get a sub wiki instace by instance id
./locallib.php: * Add a new sub wiki instance
./locallib.php: * Get a wiki instance by pageid
./locallib.php:            s.wikiid = w.id";
./locallib.php: * Get a wiki page by pageid
./locallib.php: * Get latest version of wiki page
./locallib.php: * Alias of wiki_get_current_version
./locallib.php: * @TODO, does the exactly same thing as wiki_get_current_version, should be removed
./locallib.php: * Get a wiki page by page title
./locallib.php: * @param int $swid, sub wiki id
./locallib.php: * Get first page of wiki instace
./locallib.php: * @param int $module, wiki instance object
./locallib.php:            s.wikiid = w.id AND
./locallib.php: * Create a new wiki page, if the page exists, return existing pageid
./locallib.php: * Get missing or empty pages in wiki
./locallib.php: * @param int $swid sub wiki id
./locallib.php:            WHERE s.wikiid = w.id and
./locallib.php: * Get pages list in wiki
./locallib.php: * @param int $swid sub wiki id
./locallib.php: * Return a list of orphaned wikis for one specific subwiki
./locallib.php: * @param int $swid sub wiki id
./locallib.php:            AND w.id = s.wikiid
./locallib.php: * Search wiki title
./locallib.php: * @param int $swid sub wiki id
./locallib.php: * Search wiki content
./locallib.php: * @param int $swid sub wiki id
./locallib.php: * Search wiki title and content
./locallib.php: * @param int $swid sub wiki id
./locallib.php: * Text format supported by wiki module
./locallib.php:    return array('html', 'creole', 'nwiki');
./locallib.php: * Parses a string with the wiki markup language in $markup.
./locallib.php: *     'parsed_text' => String. Contains the parsed wiki content.
./locallib.php: *     'unparsed_text' => String. Constains the original wiki content.
./locallib.php: *     'link_count' => Array of array('destination' => ..., 'new' => "is new?"). Contains the internal wiki links found in the wiki content.
./locallib.php: * This function is the parser callback to parse wiki links.
./locallib.php: * @param int $swid Sub wiki id
./locallib.php: * Returns the token used by a wiki language to represent a given tag or "object" (bold -> **)
./locallib.php:            // There is one wiki for all the class.
./locallib.php:            // Each person owns a wiki.
./locallib.php:                // Only the owner of the wiki can view it
./locallib.php:                //      mod/wiki:viewpage capability
./locallib.php:                //      mod/wiki:managewiki capability
./locallib.php:                $manage = has_capability('mod/socialwiki:managewiki', $context);
./locallib.php:        //      There is one wiki per group.
./locallib.php:        //      Each person owns a wiki.
./locallib.php:            // Only members of subwiki group could view that wiki
./locallib.php:                //      mod/wiki:managewiki capability
./locallib.php:                //      mod/wiki:viewpage capability
./locallib.php:        //      There is one wiki per group.
./locallib.php:        //      Each person owns a wiki.
./locallib.php:            // Everybody can read all wikis
./locallib.php:            // There is a wiki for all the class.
./locallib.php:            // There is a wiki per user
./locallib.php:            // Only the owner of that wiki can edit it
./locallib.php:            } else { // Current user is not the owner of that wiki.
./locallib.php:                //      mod/wiki:editpage capability
./locallib.php:                //      mod/wiki:managewiki capability
./locallib.php:                $manage = has_capability('mod/socialwiki:managewiki', $context);
./locallib.php:            // There is one wiki per group.
./locallib.php:            // Only members of subwiki group could edit that wiki
./locallib.php:                //      mod/wiki:managewiki capability
./locallib.php:                //      mod/wiki:editpage capability
./locallib.php:                $manage = has_capability('mod/socialwiki:managewiki', $context);
./locallib.php:            // Each person owns a wiki.
./locallib.php:            // Only the owner of that wiki can edit it
./locallib.php:            } else { // Current user is not the owner of that wiki.
./locallib.php:                //      mod/wiki:managewiki capability
./locallib.php:                //      mod/wiki:editpage capability
./locallib.php:                $manage = has_capability('mod/socialwiki:managewiki', $context);
./locallib.php:            // There is one wiki per group.
./locallib.php:            // Only members of subwiki group could edit that wiki
./locallib.php:                //      mod/wiki:managewiki capability
./locallib.php:                //      mod/wiki:editpage capability
./locallib.php:                $manage = has_capability('mod/socialwiki:managewiki', $context);
./locallib.php:            // Each person owns a wiki.
./locallib.php:            // Only the owner of that wiki can edit it
./locallib.php:            } else { // Current user is not the owner of that wiki.
./locallib.php:                //      mod/wiki:managewiki capability
./locallib.php:                //      mod/wiki:editpage capability
./locallib.php:                $manage = has_capability('mod/socialwiki:managewiki', $context);
./locallib.php: * Inserts or updates a wiki_locks record.
./locallib.php: * Deletes wiki_locks that are not in use. (F.Ex. after submitting the changes). If no userid is present, it deletes ALL the wiki_locks of a specific page.
./locallib.php: * Deletes wiki_locks that expired 1 hour ago.
./locallib.php: * Deletes wiki_links. It can be sepecific link or links attached in subwiki
./locallib.php: * Delete wiki synonyms related to subwikiid or page
./locallib.php:    } else if ($editor == 'nwiki') {
./locallib.php: * Delete al comments from wiki
./locallib.php:    $filemanager = new MoodleQuickForm_filemanager('attachments', get_string('wikiattachments', 'socialwiki'), array('id' => 'attachments'), array('subdirs' => false, 'maxfiles' => 99, 'maxbytes' => $CFG->maxbytes));
./locallib.php: * Prints a table with the files attached to a wiki page
./locallib.php: * Generate wiki's page tree
./locallib.php: * @param page_wiki $page. A wiki page object
./locallib.php: * Get updated pages from wiki
./pagelib.php~:     * @var array The tabs set used in wiki module
./pagelib.php~:     * @var object wiki renderer
./pagelib.php~:     * @param $wiki. Current wiki
./pagelib.php~:        // initialise wiki renderer
./pagelib.php~:            $manage = has_capability('mod/socialwiki:managewiki', $PAGE->cm->context);
./pagelib.php~: * Class that models the behavior of wiki's view comments page
./pagelib.php~:                } else if ($format == 'nwiki') {
./pagelib.php~:                    $parsedcontent = socialwiki_parse_content('nwiki', $comment->content, $options);
./pagelib.php~: * Class that models the behavior of wiki's edit comment
./pagelib.php~: * Class that models the behavior of wiki's
./pagelib.php~:                // wiki fromat
./pagelib.php~: * Class that models the behavior of wiki's
./pagelib.php~: * Class that models the behavior of wiki's history page
./pagelib.php~:     * Prints the history for a given wiki page
./pagelib.php~: * Class that models the behavior of wiki's map page
./pagelib.php~:     * @var int wiki view option
./pagelib.php~:            $fresh = wiki_refresh_cachedcontent($page);
./pagelib.php~: * Class that models the behavior of wiki's restore version page
./pagelib.php~:        require_capability('mod/socialwiki:managewiki', $this->modcontext, NULL, true, 'nomanagewikipermission', 'socialwiki');
./pagelib.php~: * Class that models the behavior of wiki's delete comment confirmation page
./pagelib.php~: * Class that models the behavior of wiki's view an old version of a page
./pagelib.php~:        require_capability('mod/socialwiki:managewiki', $this->modcontext, NULL, true, 'nomanagewikipermission', 'socialwiki');
./pagelib.php~: * This class will let user to delete wiki pages and page versions
./pagelib.php~:     * @param mixed $wiki instance of wiki
./pagelib.php~:     * Prints header for wiki page
./pagelib.php~:     * This function will display administration view to users with managewiki capability
./pagelib.php~:        //make sure anyone trying to access this page has managewiki capabilities
./pagelib.php~:        require_capability('mod/socialwiki:managewiki', $this->modcontext, NULL, true, 'noviewpagepermission', 'socialwiki');
./pagelib.php~:        //update wiki cache if timedout
./pagelib.php~:     * Show wiki page delete options
./pagelib.php~:     * @param array $pages objects of wiki pages in subwiki
./module.js: * Javascript helper function for wiki
./module.js: * @package   mod-wiki
./module.js:        args['pageid'] = wiki.pageid;
./comments.php: * @package mod-wiki-2.0
./comments.php:    print_error('incorrectwikiid', 'wiki');
./overridelocks.php: * This file contains all necessary code to edit a wiki page
./overridelocks.php: * @package mod-wiki-2.0
./overridelocks.php:if (!$subwiki = wiki_get_subwiki($page->subwikiid)) {
./overridelocks.php:    print_error('incorrectwikiid', 'socialwiki');
./overridelocks.php:if (!$cm = get_coursemodule_from_instance('wiki', $wiki->id)) {
./overridelocks.php:if (!empty($section) && !$sectioncontent = wiki_get_section_page($page, $section)) {
./create_form.php: * @package mod-wiki-2.0
./create_form.php:        $mform->addElement('header', 'general', get_string('newpagehdr', 'wiki'));
./create_form.php:        $mform->addElement('text', 'pagetitle', get_string('newpagetitle', 'wiki'), $textoptions);
./create_form.php:            $mform->addElement('static', 'format', get_string('format', 'wiki'));
./create_form.php:            $mform->addHelpButton('format', 'format', 'wiki');
./create_form.php:                $mform->addElement('radio', 'pageformat', '', get_string('format'.$format, 'wiki'), $format, $attr);
./create_form.php:        $this->add_action_buttons(false, get_string('createpage', 'wiki'));
./files.php: * @package mod-wiki-2.0
./files.php:        print_error('incorrectwikiid', 'socialwiki');
./files.php:    // Checking wiki instance of that subwiki
./files.php:        print_error('incorrectwikiid', 'socialwiki');
./files.php:$PAGE->set_title(get_string('wikifiles', 'socialwiki'));
./files.php:$PAGE->set_heading(get_string('wikifiles', 'socialwiki'));
./files.php:$PAGE->navbar->add(format_string(get_string('wikifiles', 'socialwiki')));
./index.php: * This page lists all the instances of wiki in a particular course
./index.php: * @package mod-wiki-2.0
./index.php:$strwikis = get_string("modulenameplural", "socialwiki");
./index.php:$strwiki = get_string("modulename", "socialwiki");
./index.php:$PAGE->navbar->add($strwikis, "index.php?id=$course->id");
./index.php:$PAGE->set_title($strwikis);
./index.php:    notice("There are no social wikis", "../../course/view.php?id=$course->id");
./filesedit.php: * Manage files in wiki
./filesedit.php: * @package   mod-wiki-2.0
./filesedit.php:// Checking wiki instance of that subwiki
./filesedit.php:    print_error('incorrectwikiid', 'socialwiki');
./filesedit.php:$PAGE->navbar->add(format_string(get_string('wikifiles', 'socialwiki')), $CFG->wwwroot . '/mod/socialwiki/files.php?pageid=' . $pageid);
./instancecomments.php: * @package mod-wiki-2.0
./instancecomments.php:    print_error('incorrectwikiid', 'socialwiki');
./mod_form.php: * This file defines de main wiki configuration form
./mod_form.php: * @package mod-wiki-2.0
./mod_form.php:        $mform->addElement('text', 'name', get_string('wikiname', 'socialwiki'), array('size' => '64'));
./mod_form.php:        $this->add_intro_editor(true, get_string('wikiintro', 'socialwiki'));
./mod_form.php:        $wikimodeoptions = array ('collaborative' => get_string('wikimodecollaborative', 'socialwiki'), 'individual' => get_string('wikimodeindividual', 'socialwiki'));
./mod_form.php:        // Don't allow changes to the wiki type once it is set.
./mod_form.php:        $mform->addElement('select', 'wikimode', get_string('wikimode', 'socialwiki'), $wikimodeoptions, $wikitype_attr);
./mod_form.php:        $mform->addHelpButton('wikimode', 'wikimode', 'socialwiki');
./mod_form.php:        $mform->addElement('header', 'wikifieldset', get_string('format'));
./renderer.php~:        // Checking wiki instance
./renderer.php~:            if ($tab == 'admin' && !has_capability('mod/socialwiki:managewiki', $context)) {
./renderer.php~:                // We have private wikis here
./renderer.php~:                $manage = has_capability('mod/socialwiki:managewiki', $context);
./renderer.php~:                // Only people with these capabilities can view all wikis
./renderer.php~:                $manage = has_capability('mod/socialwiki:managewiki', $context);
./renderer.php~:                // Only people with these capabilities can view all wikis
./create.php~:require_once($CFG->dirroot . '/mod/wiki/lib.php');
./create.php~:require_once($CFG->dirroot . '/mod/wiki/locallib.php');
./create.php~:require_once($CFG->dirroot . '/mod/wiki/pagelib.php');
./create.php~:$title = optional_param('title', get_string('newpage', 'wiki'), PARAM_TEXT);
./create.php~:    $subwiki = wiki_get_subwiki($swid);
./create.php~:    if (!$wiki = wiki_get_wiki($subwiki->wikiid)) {
./create.php~:        print_error('invalidwikiid', 'wiki');
./create.php~:    $subwiki = wiki_get_subwiki_by_group($wid, $group, $uid);
./create.php~:    if (!$wiki = wiki_get_wiki($wid)) {
./create.php~:        print_error('invalidwikiid', 'wiki');
./create.php~:if (!$cm = get_coursemodule_from_instance('wiki', $wiki->id)) {
./create.php~:    print_error('invalidcoursemoduleid', 'wiki');
./create.php~:    add_to_log($course->id, 'wiki', 'add page', "view.php?pageid=".$newpageid, $newpageid, $cm->id);
./create.php~:    redirect($CFG->wwwroot . '/mod/wiki/edit.php?pageid='.$newpageid);
./create.php~:    if ((int)$wiki->forceformat == 1 && $title != get_string('newpage', 'wiki')) {
./create.php~:        add_to_log($course->id, 'wiki', 'add page', "view.php?pageid=".$newpageid, $newpageid, $cm->id);
./create.php~:        redirect($CFG->wwwroot . '/mod/wiki/edit.php?pageid='.$newpageid);
./diff.php: * @package mod-wiki-2.0
./diff.php:require_once($CFG->dirroot . '/mod/socialwiki/diff/diff_nwiki.php');
./diff.php:    print_error('incorrectwikiid', 'socialwiki');
./lock.php: * @package mod-wiki-2.0
./lock.php:    print_error('incorrectwikiid', 'socialwiki');
./admin.php: * Delete wiki pages or versions
./admin.php: * This will show options for deleting wiki pages or purging page versions
./admin.php: * If user have wiki:managewiki ability then only this page will show delete
./admin.php: * @package mod-wiki-2.0
./admin.php:    print_error('incorrectwikiid', 'socialwiki');
./admin.php:require_capability('mod/socialwiki:managewiki', $context);
./admin.php:    //when current wiki page is deleted, then redirect user to create that page, as
./prettyview.php:    print_error('incorrectwikiid', 'socialwiki');
./README:http://www.upc.edu - http://dfwikilabs.org 
./renderer.php:        // Checking wiki instance
./renderer.php:            if ($tab == 'admin' && !has_capability('mod/socialwiki:managewiki', $context)) {
./renderer.php:                // We have private wikis here
./renderer.php:                $manage = has_capability('mod/socialwiki:managewiki', $context);
./renderer.php:                // Only people with these capabilities can view all wikis
./renderer.php:                $manage = has_capability('mod/socialwiki:managewiki', $context);
./renderer.php:                // Only people with these capabilities can view all wikis
./restoreversion.php: * This file renders the restoring wikipage HTML
./restoreversion.php:    print_error('incorrectwikiid', 'socialwiki');
./search.php: * @package mod-wiki
./search.php:$searchcontent = optional_param('searchwikicontent', 0, PARAM_INT);
./search.php:// @TODO: Fix call to wiki_get_subwiki_by_group
./search.php:    print_error('incorrectwikiid', 'socialwiki');
./styles.css: * @package mod-wiki-2.0
./view.php: * User that comes from a course. First wiki page must be shown
./view.php:        print_error('incorrectwikiid', 'socialwiki');
./view.php:    // Getting the subwiki corresponding to that wiki, group and user.
./view.php:    // that wiki
./view.php:        print_error('incorrectwikiid', 'socialwiki');
./view.php:    // Setting wiki instance
./view.php:        print_error('incorrectwikiid', 'socialwiki');
./view.php:        $manage = has_capability('mod/socialwiki:managewiki', $context);
./viewversion.php:    print_error('incorrectwikiid', 'socialwiki');
./styles.css~: * @package mod-wiki-2.0
./lib.php~: * Library of functions and constants for module wiki
./lib.php~: * @package mod-wiki-2.0
./lib.php~: * @return int The id of the newly inserted wiki record
./lib.php~:    $subwikis = $DB->get_records('socialwiki_subwikis', array('wikiid' => $wiki->id));
./lib.php~:    //get the wiki(s) in this course.
./lib.php~:            $subwikis = $DB->get_records('socialwiki_subwikis', array('wikiid' => $wiki->id));
./lib.php~:                            // Delete the related tag_instances related to the wiki page.
./lib.php~: * Indicates API features that the wiki supports.
./lib.php~: * that has occurred in wiki activities and print it out.
./lib.php~:    $sql = "SELECT p.*, w.id as wikiid, sw.groupid
./lib.php~:                JOIN {socialwiki} w ON w.id = sw.wikiid
./lib.php~:            if ($groupmode == SEPARATEGROUPS and !has_capability('mod/socialwiki:managewiki', $context)) {
./lib.php~:    echo $OUTPUT->heading(get_string("updatedwikipages", 'socialwiki') . ':', 3);
./lib.php~: * This function returns if a scale is being used by one wiki
./lib.php~:    //$rec = get_record("wiki","id","$wikiid","scale","-$scaleid");
./lib.php~: * Checks if scale is being used by any instance of wiki.
./lib.php~: * @return boolean True if the scale is used by any wiki
./lib.php~:    //if ($scaleid and $DB->record_exists('wiki', array('grade' => -$scaleid))) {
./lib.php~:        // wiki main page
./lib.php~:        if (has_capability('mod/socialwiki:managewiki', $context)) {
./lib.php~: * Returns all other caps used in wiki module
./files.php~: * @package mod-wiki-2.0
./files.php~:        print_error('incorrectwikiid', 'socialwiki');
./files.php~:    // Checking wiki instance of that subwiki
./files.php~:        print_error('incorrectwikiid', 'socialwiki');
./files.php~:$PAGE->set_title(get_string('wikifiles', 'socialwiki'));
./files.php~:$PAGE->set_heading(get_string('wikifiles', 'socialwiki'));
./files.php~:$PAGE->navbar->add(format_string(get_string('wikifiles', 'socialwiki')));
./edit.php~: * This file contains all necessary code to edit a wiki page
./edit.php~: * @package mod-wiki-2.0
./edit.php~:    print_error('incorrectwikiid', 'socialwiki');
./locallib.php~: * This contains functions and classes that will be used by scripts in wiki module
./locallib.php~: * @package mod-wiki-2.0
./locallib.php~: * Get a wiki instance
./locallib.php~: * @param int $wikiid the instance id of wiki
./locallib.php~: * Get sub wiki instances with same wiki id
./locallib.php~:    return $DB->get_records('socialwiki_subwikis', array('wikiid' => $wikiid));
./locallib.php~: * Get a sub wiki instance by wiki id and group id
./locallib.php~:    return $DB->get_record('socialwiki_subwikis', array('wikiid' => $wikiid, 'groupid' => $groupid, 'userid' => $userid));
./locallib.php~: * Get a sub wiki instace by instance id
./locallib.php~: * Add a new sub wiki instance
./locallib.php~: * Get a wiki instance by pageid
./locallib.php~:            s.wikiid = w.id";
./locallib.php~: * Get a wiki page by pageid
./locallib.php~: * Get latest version of wiki page
./locallib.php~: * Alias of wiki_get_current_version
./locallib.php~: * @TODO, does the exactly same thing as wiki_get_current_version, should be removed
./locallib.php~: * Get a wiki page by page title
./locallib.php~: * @param int $swid, sub wiki id
./locallib.php~: * Get first page of wiki instace
./locallib.php~: * @param int $module, wiki instance object
./locallib.php~:            s.wikiid = w.id AND
./locallib.php~: * Create a new wiki page, if the page exists, return existing pageid
./locallib.php~: * Get missing or empty pages in wiki
./locallib.php~: * @param int $swid sub wiki id
./locallib.php~:            WHERE s.wikiid = w.id and
./locallib.php~: * Get pages list in wiki
./locallib.php~: * @param int $swid sub wiki id
./locallib.php~: * Return a list of orphaned wikis for one specific subwiki
./locallib.php~: * @param int $swid sub wiki id
./locallib.php~:            AND w.id = s.wikiid
./locallib.php~: * Search wiki title
./locallib.php~: * @param int $swid sub wiki id
./locallib.php~: * Search wiki content
./locallib.php~: * @param int $swid sub wiki id
./locallib.php~: * Search wiki title and content
./locallib.php~: * @param int $swid sub wiki id
./locallib.php~: * Text format supported by wiki module
./locallib.php~:    return array('html', 'creole', 'nwiki');
./locallib.php~: * Parses a string with the wiki markup language in $markup.
./locallib.php~: *     'parsed_text' => String. Contains the parsed wiki content.
./locallib.php~: *     'unparsed_text' => String. Constains the original wiki content.
./locallib.php~: *     'link_count' => Array of array('destination' => ..., 'new' => "is new?"). Contains the internal wiki links found in the wiki content.
./locallib.php~: * This function is the parser callback to parse wiki links.
./locallib.php~: * @param int $swid Sub wiki id
./locallib.php~: * Returns the token used by a wiki language to represent a given tag or "object" (bold -> **)
./locallib.php~:            // There is one wiki for all the class.
./locallib.php~:            // Each person owns a wiki.
./locallib.php~:                // Only the owner of the wiki can view it
./locallib.php~:                //      mod/wiki:viewpage capability
./locallib.php~:                //      mod/wiki:managewiki capability
./locallib.php~:                $manage = has_capability('mod/socialwiki:managewiki', $context);
./locallib.php~:        //      There is one wiki per group.
./locallib.php~:        //      Each person owns a wiki.
./locallib.php~:            // Only members of subwiki group could view that wiki
./locallib.php~:                //      mod/wiki:managewiki capability
./locallib.php~:                //      mod/wiki:viewpage capability
./locallib.php~:        //      There is one wiki per group.
./locallib.php~:        //      Each person owns a wiki.
./locallib.php~:            // Everybody can read all wikis
./locallib.php~:            // There is a wiki for all the class.
./locallib.php~:            // There is a wiki per user
./locallib.php~:            // Only the owner of that wiki can edit it
./locallib.php~:            } else { // Current user is not the owner of that wiki.
./locallib.php~:                //      mod/wiki:editpage capability
./locallib.php~:                //      mod/wiki:managewiki capability
./locallib.php~:                $manage = has_capability('mod/socialwiki:managewiki', $context);
./locallib.php~:            // There is one wiki per group.
./locallib.php~:            // Only members of subwiki group could edit that wiki
./locallib.php~:                //      mod/wiki:managewiki capability
./locallib.php~:                //      mod/wiki:editpage capability
./locallib.php~:                $manage = has_capability('mod/socialwiki:managewiki', $context);
./locallib.php~:            // Each person owns a wiki.
./locallib.php~:            // Only the owner of that wiki can edit it
./locallib.php~:            } else { // Current user is not the owner of that wiki.
./locallib.php~:                //      mod/wiki:managewiki capability
./locallib.php~:                //      mod/wiki:editpage capability
./locallib.php~:                $manage = has_capability('mod/socialwiki:managewiki', $context);
./locallib.php~:            // There is one wiki per group.
./locallib.php~:            // Only members of subwiki group could edit that wiki
./locallib.php~:                //      mod/wiki:managewiki capability
./locallib.php~:                //      mod/wiki:editpage capability
./locallib.php~:                $manage = has_capability('mod/socialwiki:managewiki', $context);
./locallib.php~:            // Each person owns a wiki.
./locallib.php~:            // Only the owner of that wiki can edit it
./locallib.php~:            } else { // Current user is not the owner of that wiki.
./locallib.php~:                //      mod/wiki:managewiki capability
./locallib.php~:                //      mod/wiki:editpage capability
./locallib.php~:                $manage = has_capability('mod/socialwiki:managewiki', $context);
./locallib.php~: * Inserts or updates a wiki_locks record.
./locallib.php~: * Deletes wiki_locks that are not in use. (F.Ex. after submitting the changes). If no userid is present, it deletes ALL the wiki_locks of a specific page.
./locallib.php~: * Deletes wiki_locks that expired 1 hour ago.
./locallib.php~: * Deletes wiki_links. It can be sepecific link or links attached in subwiki
./locallib.php~: * Delete wiki synonyms related to subwikiid or page
./locallib.php~:    } else if ($editor == 'nwiki') {
./locallib.php~: * Delete al comments from wiki
./locallib.php~:    $filemanager = new MoodleQuickForm_filemanager('attachments', get_string('wikiattachments', 'socialwiki'), array('id' => 'attachments'), array('subdirs' => false, 'maxfiles' => 99, 'maxbytes' => $CFG->maxbytes));
./locallib.php~: * Prints a table with the files attached to a wiki page
./locallib.php~: * Generate wiki's page tree
./locallib.php~: * @param page_wiki $page. A wiki page object
./locallib.php~: * Get updated pages from wiki
./module.js~: * Javascript helper function for wiki
./module.js~: * @package   mod-wiki
./module.js~:        args['pageid'] = wiki.pageid;
./edit_form.php~: * @package mod-wiki-2.0
./edit_form.php~:require_once($CFG->dirroot . '/mod/socialwiki/editors/wikieditor.php');
./edit_form.php~:            // This is being done ONLY to aid those who may have created there own wiki pages. It should be removed sometime
./edit_form.php~:            // Use wiki editor
./mod_form.php~: * This file defines de main wiki configuration form
./mod_form.php~: * @package mod-wiki-2.0
./mod_form.php~:        // Don't allow changes to the wiki type once it is set.
./mod_form.php~:        $mform->addElement('header', 'wikifieldset', get_string('format'));
./editcomments.php~: * @package mod-wiki-2.0
./editcomments.php~:    print_error('incorrectwikiid', 'socialwiki');
./filesedit.php~: * Manage files in wiki
./filesedit.php~: * @package   mod-wiki-2.0
./filesedit.php~:// Checking wiki instance of that subwiki
./filesedit.php~:    print_error('incorrectwikiid', 'socialwiki');
./filesedit.php~:$PAGE->navbar->add(format_string(get_string('wikifiles', 'socialwiki')), $CFG->wwwroot . '/mod/socialwiki/files.php?pageid=' . $pageid);
./search.php~: * @package mod-wiki
./search.php~:$searchcontent = optional_param('searchwikicontent', 0, PARAM_INT);
./search.php~:// @TODO: Fix call to wiki_get_subwiki_by_group
./search.php~:    print_error('incorrectwikiid', 'socialwiki');
./view.php~: * User that comes from a course. First wiki page must be shown
./view.php~:        print_error('incorrectwikiid', 'socialwiki');
./view.php~:    // Getting the subwiki corresponding to that wiki, group and user.
./view.php~:    // that wiki
./view.php~:        print_error('incorrectwikiid', 'socialwiki');
./view.php~:    // Setting wiki instance
./view.php~:        print_error('incorrectwikiid', 'socialwiki');
./view.php~:        $manage = has_capability('mod/socialwiki:managewiki', $context);
